{
  "openapi": "3.0.3",
  "info": {
    "title": "Sample Pet Store App",
    "description": "This is a sample server for a pet store.",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "name": "API Support",
      "url": "https://www.example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "paths": {
    "/pet/name/{id}": {
      "get": {
        "description": "Returns pet name by pet id",
        "operationId": "petNameByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "pet ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/pet/friendNames/{id}": {
      "get": {
        "description": "Returns names of all friends of pet",
        "operationId": "petFriendsNamesByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "pet ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Names of all friends",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pet": {
      "get": {
        "description": "Returns pet from the system that the user has access to",
        "operationId": "petGet",
        "parameters": [
          {
            "name": "petID",
            "in": "query",
            "description": "ID of pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1337
            }
          },
          {
            "name": "x-tags",
            "in": "header",
            "description": "tags of pets",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "x-scope",
            "in": "header",
            "description": "pet scopes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates pet",
        "operationId": "petCreate",
        "requestBody": {
          "description": "pet to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A new pet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        }
      }
    },
    "/pet/avatar": {
      "get": {
        "description": "Returns pet avatar by id",
        "operationId": "petGetAvatarByID",
        "parameters": [
          {
            "name": "petID",
            "in": "query",
            "description": "ID of pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pet avatar",
            "content": {
              "application/octet-stream": {}
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "description": "Uploads pet avatar by id",
        "operationId": "petUploadAvatarByID",
        "parameters": [
          {
            "name": "petID",
            "in": "query",
            "description": "ID of pet",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {}
          }
        },
        "responses": {
          "200": {
            "description": "A pet avatar uploaded"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/pet/{name}": {
      "get": {
        "description": "Returns pet by name from the system that the user has access to",
        "operationId": "petGetByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of pet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        }
      }
    },
    "/foobar": {
      "get": {
        "description": "Dumb endpoint for testing things",
        "operationId": "foobarGet",
        "parameters": [
          {
            "name": "inlinedParam",
            "in": "query",
            "description": "inlinedParam",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/skipParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PetResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Dumb endpoint for testing things",
        "operationId": "foobarPost",
        "requestBody": {
          "$ref": "#/components/requestBodies/PetCreate"
        },
        "responses": {
          "200": {
            "description": "A new pet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "responses": {
          "default": {
            "description": "Empty response"
          }
        }
      }
    },
    "/pet/updateName": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "minLength": 6
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "empty"
          }
        }
      }
    },
    "/pet/updateNameAlias": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PetName"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "empty"
          }
        }
      }
    },
    "/error": {
      "get": {
        "description": "Returns error",
        "operationId": "errorGet",
        "responses": {
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/test/header": {
      "get": {
        "description": "Test for header param",
        "operationId": "getHeader",
        "parameters": [
          {
            "in": "header",
            "required": true,
            "name": "x-auth-token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns sha256 of header value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hash"
                }
              }
            }
          }
        }
      }
    },
    "/name/{id}/{foo}1234{bar}-{baz}!{kek}": {
      "get": {
        "description": "Retrieve data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "foo",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "bar",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "baz",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "kek",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "operationId": "dataGetFormat",
        "responses": {
          "200": {
            "description": "Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testObjectQueryParameter": {
      "get": {
        "operationId": "testObjectQueryParameter",
        "parameters": [
          {
            "name": "formObject",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "object",
              "required": [
                "min",
                "max",
                "filter"
              ],
              "properties": {
                "min": {
                  "type": "integer"
                },
                "max": {
                  "type": "integer"
                },
                "filter": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "deepObject",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "required": [
                "min",
                "max",
                "filter"
              ],
              "properties": {
                "min": {
                  "type": "integer"
                },
                "max": {
                  "type": "integer"
                },
                "filter": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "style",
                    "min",
                    "max",
                    "filter"
                  ],
                  "properties": {
                    "style": {
                      "type": "string"
                    },
                    "min": {
                      "type": "integer"
                    },
                    "max": {
                      "type": "integer"
                    },
                    "filter": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/testFormURLEncoded": {
      "post": {
        "operationId": "testFormURLEncoded",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DescriptionSimple"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    },
    "/oneofBug": {
      "post": {
        "operationId": "oneofBug",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OneOfBugs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ID": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "DescriptionDetailed": {
        "type": "object",
        "required": [
          "name",
          "count"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        }
      },
      "DescriptionSimple": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "minLength": 1
        }
      },
      "NullableEnums": {
        "type": "object",
        "required": [
          "only_nullable",
          "only_null_value",
          "both"
        ],
        "properties": {
          "only_nullable": {
            "type": "string",
            "nullable": true,
            "description": "must not be nullable",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "only_null_value": {
            "type": "string",
            "description": "must be nullable",
            "enum": [
              "asc",
              "desc",
              null
            ]
          },
          "both": {
            "type": "string",
            "nullable": true,
            "description": "must be nullable",
            "enum": [
              "asc",
              "desc",
              null
            ]
          }
        }
      },
      "StringStringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/StringMap"
        }
      },
      "MapWithProperties": {
        "type": "object",
        "required": [
          "required"
        ],
        "properties": {
          "required": {
            "type": "integer"
          },
          "optional": {
            "type": "integer"
          },
          "sub_map": {
            "$ref": "#/components/schemas/StringMap"
          },
          "inlined_sub_map": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "Data": {
        "type": "object",
        "required": [
          "id",
          "email",
          "format",
          "hostname",
          "description"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "description": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DescriptionDetailed"
              },
              {
                "$ref": "#/components/schemas/DescriptionSimple"
              }
            ]
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "hostname": {
            "type": "string",
            "format": "hostname"
          },
          "format": {
            "type": "string",
            "pattern": "^\\d-\\d$"
          },
          "base64": {
            "type": "string",
            "format": "byte"
          },
          "nullable_enum": {
            "$ref": "#/components/schemas/NullableEnums"
          }
        }
      },
      "ArrayTest": {
        "description": "test array encoder/decoder generation",
        "type": "object",
        "required": [
          "required",
          "nullable_required"
        ],
        "properties": {
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optional": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nullable_required": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "nullable_optional": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Pet": {
        "description": "cute and lovely creature",
        "type": "object",
        "properties": {
          "primary": {
            "$ref": "#/components/schemas/Pet"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 100000
          },
          "unique_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 4,
            "maxLength": 24
          },
          "type": {
            "type": "string",
            "enum": [
              "fifa",
              "fofa"
            ]
          },
          "kind": {
            "type": "string",
            "enum": [
              "big",
              "smol"
            ]
          },
          "tag": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "ip_v4": {
            "type": "string",
            "format": "ipv4"
          },
          "ip_v6": {
            "type": "string",
            "format": "ipv6"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "rate": {
            "type": "string",
            "format": "duration"
          },
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "nullStr": {
            "type": "string",
            "nullable": true
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            },
            "maxItems": 255
          },
          "next": {
            "$ref": "#/components/schemas/Data"
          },
          "testInteger1": {
            "type": "integer",
            "multipleOf": 10
          },
          "testFloat1": {
            "type": "number",
            "multipleOf": 10,
            "minimum": 15
          },
          "testArray1": {
            "type": "array",
            "items": {
              "type": "array",
              "maxItems": 16,
              "items": {
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "testArray2": {
            "$ref": "#/components/schemas/ArrayTest"
          },
          "testMap": {
            "$ref": "#/components/schemas/StringStringMap"
          },
          "testMapWithProps": {
            "$ref": "#/components/schemas/MapWithProperties"
          },
          "testDate": {
            "type": "string",
            "format": "date"
          },
          "testDuration": {
            "type": "string",
            "format": "duration"
          },
          "testTime": {
            "type": "string",
            "format": "time"
          },
          "testDateTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "unique_id",
          "name",
          "birthday",
          "nickname",
          "rate",
          "ip",
          "ip_v4",
          "ip_v6",
          "uri",
          "kind"
        ]
      },
      "PetName": {
        "type": "string",
        "minLength": 6
      },
      "Hash": {
        "type": "object",
        "required": [
          "raw",
          "hex"
        ],
        "properties": {
          "raw": {
            "type": "string",
            "format": "byte"
          },
          "hex": {
            "type": "string",
            "minLength": 64,
            "maxLength": 64
          }
        }
      },
      "Issue143": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "common-1",
              "common-2",
              "unique-1"
            ],
            "properties": {
              "common-1": {
                "type": "string"
              },
              "common-2": {
                "type": "integer"
              },
              "unique-1": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "common-1",
              "common-2",
              "unique-2"
            ],
            "properties": {
              "common-1": {
                "type": "string"
              },
              "common-2": {
                "type": "integer"
              },
              "unique-2": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "common-1",
              "common-2",
              "unique-3"
            ],
            "properties": {
              "common-1": {
                "type": "string"
              },
              "common-2": {
                "type": "integer"
              },
              "common-3": {
                "type": "integer"
              },
              "unique-3": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "common-1",
              "common-2",
              "unique-4"
            ],
            "properties": {
              "common-3": {
                "type": "integer"
              },
              "unique-4": {
                "type": "string"
              }
            }
          }
        ]
      },
      "OneVariantHasNoUniqueFields": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "a",
              "c"
            ],
            "properties": {
              "a": {
                "type": "string"
              },
              "b": {
                "type": "integer"
              },
              "c": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "a",
              "c"
            ],
            "properties": {
              "a": {
                "type": "string"
              },
              "b": {
                "type": "integer"
              },
              "c": {
                "type": "string"
              },
              "d": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "OneOfBugs": {
        "type": "object",
        "required": [
          "issue143",
          "additional-fields"
        ],
        "properties": {
          "issue143": {
            "$ref": "#/components/schemas/Issue143"
          },
          "additional-fields": {
            "$ref": "#/components/schemas/OneVariantHasNoUniqueFields"
          }
        }
      }
    },
    "parameters": {
      "skipParam": {
        "name": "skip",
        "in": "query",
        "description": "number of items to skip",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "max records to return",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "requestBodies": {
      "PetCreate": {
        "description": "pet to add to the system",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "responses": {
      "PetResponse": {
        "description": "A pet.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "NotFound": {
        "description": "Entity not found."
      },
      "IllegalInput": {
        "description": "Illegal input for operation."
      },
      "Error": {
        "description": "General Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.org/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      }
    }
  }
}
